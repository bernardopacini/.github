parameters:
- name: REPO_NAME
  type: string
- name: GCC_CONFIG
  type: string
- name: INTEL_CONFIG
  type: string
- name: BUILD
  type: string
- name: TEST
  type: string

jobs:
- job:
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      'c7-gcc-ompi-latest':
        DOCKER_TAG: c7-gcc-ompi-latest
        CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
      'c7-intel-impi-latest':
        DOCKER_TAG: c7-intel-impi-latest
        CONFIG_FILE: ${{ parameters.INTEL_CONFIG }}
      'u20-gcc-ompi-latest':
        DOCKER_TAG: u20-gcc-ompi-latest
        CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
      'u20-gcc-ompi-stable':
        DOCKER_TAG: u20-gcc-ompi-stable
        CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
  variables:
    MDOLAB_USER: /home/mdolabuser/
    DOCKER_WORKING_DIR: ${{ variables.MDOLAB_USER }}/repos/${{ parameters.REPO_NAME }}
    DOCKER_MOUNT_DIR: ${{ variables.MDOLAB_USER }}/azure/${{ parameters.REPO_NAME }}
  steps:
  - script: |
      docker pull mdolab/public:$(DOCKER_TAG)
      docker run -t -d --name app --mount "type=bind,src=$(pwd),target=${{ variables.DOCKER_MOUNT_DIR }}" mdolab/public:$(DOCKER_TAG) /bin/bash
      docker exec app /bin/bash -c "rm -rf ${{ variables.DOCKER_WORKING_DIR }} && cp -r ${{ variables.DOCKER_MOUNT_DIR }} ${{ variables.DOCKER_WORKING_DIR }}"
    displayName: Prepare Repository
  - script: docker exec app /bin/bash -env CONFIG_FILE=$(CONFIG_FILE) -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && ${{ parameters.BUILD }}"
    displayName: Build
  - script: docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && ${{ parameters.TEST }}"
    displayName: Run Tests